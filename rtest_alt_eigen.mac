(load("alt_eigen.mac"),kill(facts),reset(gcd,algebraic,domain,resultant),0);
0$

(check_eigenspace(M) := block([λ,xxx,pk,es,MM, OK : true],
    xxx : alt_eigen(M,'var = λ),
    for xk in xxx do (
        pk : first(xk),
        es : second(xk),
        MM : matrix(),
        for ck in es do (
            MM : addcol(MM, ck)),
        MM : fullratsubst(pk, (M - λ*identfor(M) ) . MM),
        OK : OK and every(lambda([q],q=0),MM)),
    OK),0);
0$

/* Does alt_eigen check the input correctly? The input should be a nonempty, square,
and unblocked matrix that has no entries that involve a floating point number. */

errcatch(alt_eigen(a+b));
[]$

errcatch(alt_eigen([a+b]));
[]$

errcatch(alt_eigen(matrix()));
[]$

errcatch(alt_eigen(matrix([1,2])));
[]$

errcatch(alt_eigen(genmatrix(lambda([a,b],genmatrix(lambda([c,d], random(12)),2,2)),2,2)));
[]$

errcatch(alt_eigen(matrix([3.14,2],[5,7])));
[]$

errcatch(alt_eigen(matrix([x+3.14,2],[5,7])));
[]$

errcatch(alt_eigen(matrix([1,2],[3,4]), 'maxdegree=%pi));
[]$

/* Basic usage--diagonal matrices */
alt_eigen(matrix([0]), 'var=z);
[z=0,[matrix([1])]]$

alt_eigen(matrix([2]), 'var=z);
[[z=2,sspan(matrix([1]))]]$

alt_eigen(matrix([0,0],[0,0]), 'var=z);
[z=0,[matrix([1],[0]),matrix([0],[1])]]$

alt_eigen(matrix([2,0],[0,2]), 'var=z);
[[z=2,sspan(matrix([0],[1]),matrix([1],[0]))]]$

alt_eigen(matrix([2,0],[0,8]), 'var=z);
[[z=2,sspan(matrix([1],[0]))],[z=8,sspan(matrix([0],[-1]))]]$

alt_eigen(matrix([0,%i],[1,0]),'var=z);
[[z^2=%i,sspan(matrix([%i],[z]))]]$

alt_eigen(matrix([1,2,3],[4,5,6],[0,0,2*sqrt(3)+3]),'var=z);
[[z^2=6*z+3,sspan(matrix([2],[z-1],[0]))],
 [z=2*sqrt(3)+3,sspan(matrix([-sqrt(3)-1],[-(2*sqrt(3))-4],[0]))]]$

/* Does the assuming function work OK? */
block([xxx : alt_eigen(matrix([1,0,2],[0,1,8],[0,0,q]), 'var=z)],[xxx, subst(q=28,xxx)]);
[assuming(notequal((q-1)^2,0),[[z=q,sspan(matrix([-2],[-8],[1-q]))],
                               [z=1,sspan(matrix([0],[1],[0]),
                                          matrix([1],[0],[0]))]]),
[[z=28,sspan(matrix([-2],[-8],[-27]))],
 [z=1,sspan(matrix([0],[1],[0]),matrix([1],[0],[0]))]]]$

/* See #4169 spmod bug when algebraic is true */
(M : matrix([1,1/2,%i],[0,1,1/2],[0,1/2,1+%i]),0);
0$

block([gcd : subres], alt_eigen(M,'var=z));
[[z=(%i+2)/2,sspan(matrix([-1],[%i],[-1]))],
 [z=1,sspan(matrix([1],[0],[0]))]]$

block([gcd : spmod], alt_eigen(M,'var=z));
[[z=(%i+2)/2,sspan(matrix([-1],[%i],[-1]))],
 [z=1,sspan(matrix([1],[0],[0]))]]$

(M : matrix([15714,	24872,	12436],	[-1450,	-2151,	-1160],[-7025,	-11240,	-5451]),0);
0$

alt_eigen(M, var='z,maxdegree=1,'orthogonal=false);
[[z=169,sspan(matrix([-8],[5],[0]),matrix([0],[1],[-2]))],
  [z=7774,sspan(matrix([3109],[-290],[-1405]))]]$

alt_eigen(M, var='z,maxdegree=1,'orthogonal=true);
    [[z=169,sspan(matrix([-8],[5],[0]),matrix([1780],[32],[-1]))],
     [z=7774,sspan(matrix([3109],[-290],[-1405]))]]$

(M : matrix(
		[(83241*%i+42732)/380320,-(7992*%i-2331)/95080,	(3996*%i+2997)/47540,-(2997*%i-3996)/47540],
		[-(40761*%i-248448)/3803200,(74178*%i+112071)/950800,(69876*%i+52407)/475400,	-(52407*%i-69876)/475400],
		[(66843*%i-407424)/7606400,	(229176*%i-66843)/1901600,(99342*%i-14631)/950800,	(85941*%i-114588)/950800],
		[(60921*%i-371328)/7606400,	(208872*%i-60921)/1901600,	-(104436*%i+78327)/950800,	(292257*%i-33126)/950800]),0);
0$

block([gcd : 'subres, algebraic : true], alt_eigen(M, 'var = z, 'orthogonal = false));
[[z=(27*%i-36)/800,sspan(matrix([-740],[-1294],	[1061],	[967]))],
 [z=(9*%i+3)/40,sspan(matrix([0],[0],[3*%i-4],[4*%i+3]),
   matrix([0],[24*%i+18],[24*%i-7],[0]),
   matrix([288*%i-84],[128-21*%i],[0],[0]))]]$

block([gcd : 'subres, algebraic : true], alt_eigen(M, 'var = z, 'orthogonal = true));
[[z=(27*%i-36)/800,sspan(matrix([-740],[-1294],[1061],[967]))],
 [z=(9*%i+3)/40,sspan(matrix([0],[0],[3*%i-4],[4*%i+3]),
 matrix([0],[24*%i+18],[24*%i-7],[-(7*%i)-24]),
 matrix([288*%i-84],[3200-525*%i],[-(2694*%i)-2808],[2694-2808*%i]))]]$	

check_eigenspace(M);
true$

/* Example of  algebraic multiplicity =/= geometric multiplicity. */
alt_eigen(matrix([1,2],[0,1]),'var = z);
[[z=1,sspan(matrix([1],[0]))]]$

alt_eigen(matrix([1,2],[3,2]),'var = z);
[[z=-1,sspan(matrix([-1],[1]))],
 [z=4,sspan(matrix([-2],[-3]))]]$

alt_eigen(matrix([-1,-1,-2],[2,2,1],[6,2,6]),'var=q);
[[q=2,sspan(matrix([1],[1],[-2]))],
 [q=3,sspan(matrix([-1],[0],[2]))]]$

(remvalue(M),0);
0$

check_eigenspace(matrix([15714,24872,12436],	
                         [-1450,-2151,-1160],
		                     [-7025,-11240,-5451]));
true$

/* Did the code leak any facts or contexts?*/
facts();
[]$

contexts;
[initial,global]$

/* The values of gcd, algebraic, domain, and resultant should be unaltered.*/
reset(gcd,algebraic,domain, resultant);
[]$